ggplot(mh.sale, aes(GROSS.SQUARE.FEET, SALE.PRICE.n)) + geom_point()
ggplot(mh.sale, aes(log(GROSS.SQUARE.FEET), log(SALE.PRICE.n))) + geom_point()
# Seems like we found some let's investigate further and see what we can do
# Factorize BUILDING.CLASS.CATEGORY
mh.sale$BUILDING.CLASS.CATEGORY <- factor(mh.sale$BUILDING.CLASS.CATEGORY)
# Let us look at building types and see what is most reasonable to work with
levels(mh.sale$BUILDING.CLASS.CATEGORY)
# We do want to work with building types that give us GROSS.SQUARE.FEET and lad.sqft
summaryBy(GROSS.SQUARE.FEET+LAND.SQUARE.FEET~BUILDING.CLASS.CATEGORY,
data=mh.sale, FUN=c(min, max))
# It seems most reasonable to work with 1, 2, and 3 family homes
mh.homes <- mh.sale[which(grepl("FAMILY",mh.sale$BUILDING.CLASS.CATEGORY)),]
# Let us look and see if we still have outliers
ggplot(mh.homes, aes(GROSS.SQUARE.FEET, SALE.PRICE.n)) + geom_point()
ggplot(mh.homes, aes(log(GROSS.SQUARE.FEET), log(SALE.PRICE.n))) + geom_point()
# We seem to have some, let's take a closer look
summaryBy(SALE.PRICE.n~ADDRESS, data=subset(mh.homes, SALE.PRICE.n<10000),
FUN=c(length, min, max))
# The summarized values above are definitely outliers and so we shall omit them
mh.homes$outliers <- (log(mh.homes$SALE.PRICE.n) <=5) + 0
mh.homes <- mh.homes[which(mh.homes$outliers==0),]
# Let us look and see if we still have outliers
ggplot(mh.homes, aes(GROSS.SQUARE.FEET, SALE.PRICE.n)) + geom_point()
ggplot(mh.homes, aes(log(GROSS.SQUARE.FEET), log(SALE.PRICE.n))) + geom_point()
# This looks beautiful, we can now continue with our work!
################################################################################
# Once the data is in good shape, conduct exploratory data analysis to visualize
# and make compariosons (i) across NEIGHBORHOODs,
################################################################################
# Factorize NEIGHBORHOOD
mh.homes$NEIGHBORHOOD <- factor(mh.homes$NEIGHBORHOOD)
# Let's first see which NEIGHBORHOODs are included in our data
levels(mh.homes$NEIGHBORHOOD)
# Let's explore the data quantitatively first:
metrics <- function(x) {
c(length(x),                 # count
round(mean(x)),            # mean
round(median(x)),          # median
names(sort(-table(x)))[1], # mode
round(sd(x)),              # standard deviation
min(x),                    # minimum
max(x),                    # maximum
max(x)-min(x))             # range
}
# Sale price across NEIGHBORHOODs
summaryBy(SALE.PRICE.n~NEIGHBORHOOD, data=mh.homes, FUN=metrics,
fun.names=c("Count","Mean","Median","Mode","SD","Min","Max","Range"))
# Gross square feet across NEIGHBORHOODs
summaryBy(GROSS.SQUARE.FEET~NEIGHBORHOOD, data=mh.homes, FUN=metrics,
fun.names=c("Count","Mean","Median","Mode","SD","Min","Max","Range"))
# Land square feet across NEIGHBORHOODs
summaryBy(LAND.SQUARE.FEET~NEIGHBORHOOD, data=mh.homes, FUN=metrics,
fun.names=c("Count","Mean","Median","Mode","SD","Min","Max","Range"))
# Year built  across NEIGHBORHOODs
summaryBy(year.built~NEIGHBORHOOD, data=mh.homes, FUN=metrics,
fun.names=c("Count","Mean","Median","Mode","SD","Min","Max","Range"))
# Let's now explore the data by visualizing it:
# Number of sales of homes across NEIGHBORHOODs
ggplot(mh.homes, aes(x=NEIGHBORHOOD, fill=NEIGHBORHOOD, ymax=max(..count..))) +
geom_histogram(binwidth = diff(range(mh.homes$SALE.PRICE.n)/28)) +
stat_bin(binwidth=1,geom="text",drop=TRUE,aes(label=..count.., vjust=-1))
# Sale price across NEIGHBORHOODs
# Histogram
ggplot(mh.homes, aes(x=SALE.PRICE.n, fill=NEIGHBORHOOD)) +
geom_histogram(binwidth = diff(range(mh.homes$SALE.PRICE.n)/60))
# Box and whisker plot
ggplot(mh.homes, aes(x=NEIGHBORHOOD, y=SALE.PRICE.n, fill=NEIGHBORHOOD)) +
geom_boxplot()
# Density plot
ggplot(mh.homes, aes(x=SALE.PRICE.n, color=NEIGHBORHOOD)) + geom_density()
# Jitter Plot
ggplot(mh.homes, aes(x=NEIGHBORHOOD, y=SALE.PRICE.n, color=NEIGHBORHOOD)) +
geom_jitter()
# Scatter Plot
ggplot(mh.homes, aes(x=NEIGHBORHOOD, SALE.PRICE.n, color=NEIGHBORHOOD)) +
geom_point()
# Kernel density estimate
ggplot(mh.homes, aes(x=SALE.PRICE.n, fill=NEIGHBORHOOD)) + stat_density()
# Gross square feet across NEIGHBORHOODs
# Histogram
ggplot(mh.homes, aes(x=GROSS.SQUARE.FEET, fill=NEIGHBORHOOD)) +
geom_histogram(binwidth = diff(range(mh.homes$GROSS.SQUARE.FEET)/60))
# Box and whisker plot
ggplot(mh.homes, aes(x=NEIGHBORHOOD, y=GROSS.SQUARE.FEET, fill=NEIGHBORHOOD)) +
geom_boxplot()
# Density plot
ggplot(mh.homes, aes(x=GROSS.SQUARE.FEET, color=NEIGHBORHOOD)) + geom_density()
# Jitter Plot
ggplot(mh.homes, aes(x=NEIGHBORHOOD, y=GROSS.SQUARE.FEET, color=NEIGHBORHOOD)) +
geom_jitter()
# Scatter Plot
ggplot(mh.homes, aes(x=NEIGHBORHOOD, GROSS.SQUARE.FEET, color=NEIGHBORHOOD)) +
geom_point()
# Kernel density estimate
ggplot(mh.homes, aes(x=GROSS.SQUARE.FEET, fill=NEIGHBORHOOD)) + stat_density()
# Land square feet across NEIGHBORHOODs
# Histogram
ggplot(mh.homes, aes(x=LAND.SQUARE.FEET, fill=NEIGHBORHOOD)) +
geom_histogram(binwidth = diff(range(mh.homes$LAND.SQUARE.FEET)/30))
# Box and whisker plot
ggplot(mh.homes, aes(x=NEIGHBORHOOD, y=LAND.SQUARE.FEET, fill=NEIGHBORHOOD)) +
geom_boxplot()
# Density plot
ggplot(mh.homes, aes(x=LAND.SQUARE.FEET, color=NEIGHBORHOOD)) + geom_density()
# Jitter Plot
ggplot(mh.homes, aes(x=NEIGHBORHOOD, y=LAND.SQUARE.FEET, color=NEIGHBORHOOD)) +
geom_jitter()
# Scatter Plot
ggplot(mh.homes, aes(x=NEIGHBORHOOD, LAND.SQUARE.FEET, color=NEIGHBORHOOD)) +
geom_point()
# Kernel density estimate
ggplot(mh.homes, aes(x=LAND.SQUARE.FEET, fill=NEIGHBORHOOD)) + stat_density()
cat(c("Initializing data...\n"), sep="")
if(file.exists("manhattan.csv")) {
mh <- read.xls("manhattan.csv",pattern="BOROUGH")
} else {
cat(c("Can't find data file!\n"), sep="")
}
mh <- read.csv(file="manhattan.csv",head=TRUE,sep=",")
# Get some information about what we have to work with
head(mh)
summary(mh)
# Set column names to lower case
names(mh) <-tolower(names(mh))
# Creates a numerical version of columns containing commas and/or dollar signs
mh$SALE.PRICE.n <- as.numeric(gsub("[^[:digit:]]", "", mh$SALE.PRICE))
mh$GROSS.SQUARE.FEET <- as.numeric(gsub("[^[:digit:]]", "", mh$GROSS.SQUARE.FEET))
mh$LAND.SQUARE.FEET <- as.numeric(gsub("[^[:digit:]]", "", mh$land.square.feet))
# See if we have any invalid values within the newly created columns
count(is.na(mh$SALE.PRICE.n))
count(is.na(mh$GROSS.SQUARE.FEET))
count(is.na(mh$LAND.SQUARE.FEET))
head(mh)
summary(mh)
mh <- read.csv(file="manhattan.csv",head=TRUE,sep=",")
head(mh)
summary(mh)
head(mh)
summary(mh)
# Creates a numerical version of columns containing commas and/or dollar signs
mh$SALE.PRICE.n <- as.numeric(gsub("[^[:digit:]]", "", mh$SALE.PRICE))
mh$GROSS.SQUARE.FEET <- as.numeric(gsub("[^[:digit:]]", "", mh$GROSS.SQUARE.FEET))
mh$LAND.SQUARE.FEET <- as.numeric(gsub("[^[:digit:]]", "", mh$LAND.SQUARE.FEET))
# See if we have any invalid values within the newly created columns
count(is.na(mh$SALE.PRICE.n))
count(is.na(mh$GROSS.SQUARE.FEET))
count(is.na(mh$LAND.SQUARE.FEET))
mh$SALE.DATE <- as.Date(mh$SALE.DATE)
# Making sure values I think are numerical are being treated as such
mh$year.built <- as.numeric(as.character(mh$YEAR.BUILT))
# Some exploration to make sure there's nothing weird going on with sale prices
# Total sales on record
ggplot(mh, aes(x=SALE.PRICE.n)) +
geom_histogram(binwidth = diff(range(mh$SALE.PRICE.n)))
# Total sales on record with a price more than 0
ggplot(subset(mh, SALE.PRICE.n>0), aes(x=SALE.PRICE.n)) +
geom_histogram(binwidth = diff(range(mh$SALE.PRICE.n)))
# Total sales on record with a price of 0
ggplot(subset(mh, SALE.PRICE.n==0), aes(x=GROSS.SQUARE.FEET)) +
geom_histogram(binwidth = diff(range(mh$GROSS.SQUARE.FEET)))
ggplot(mh, aes(x=SALE.PRICE.n)) +
geom_histogram(binwidth = diff(range(mh$SALE.PRICE.n)))
ggplot(subset(mh, SALE.PRICE.n>0), aes(x=SALE.PRICE.n)) +
geom_histogram(binwidth = diff(range(mh$SALE.PRICE.n)))
ggplot(subset(mh, SALE.PRICE.n==0), aes(x=GROSS.SQUARE.FEET)) +
geom_histogram(binwidth = diff(range(mh$GROSS.SQUARE.FEET)))
mh$year.built <- as.numeric(as.character(mh$YEAR.BUILT))
mh.sale <- mh[mh$SALE.PRICE.n!=0,]
ggplot(mh.sale, aes(log(GROSS.SQUARE.FEET), log(SALE.PRICE.n))) + geom_point()
ggplot(mh.sale, aes(GROSS.SQUARE.FEET, SALE.PRICE.n)) + geom_point()
ggplot(mh.sale, aes(log(GROSS.SQUARE.FEET), log(SALE.PRICE.n))) + geom_point()
mh.sale$BUILDING.CLASS.CATEGORY <- factor(mh.sale$BUILDING.CLASS.CATEGORY)
levels(mh.sale$BUILDING.CLASS.CATEGORY)
summaryBy(GROSS.SQUARE.FEET+LAND.SQUARE.FEET~BUILDING.CLASS.CATEGORY,
data=mh.sale, FUN=c(min, max))
summaryBy(GROSS.SQUARE.FEET+LAND.SQUARE.FEET~BUILDING.CLASS.CATEGORY,
data=mh.sale, FUN=c(min, max))
mh.homes <- mh.sale[which(grepl("FAMILY",mh.sale$BUILDING.CLASS.CATEGORY)),]
ggplot(mh.homes, aes(GROSS.SQUARE.FEET, SALE.PRICE.n)) + geom_point()
ggplot(mh.homes, aes(log(GROSS.SQUARE.FEET), log(SALE.PRICE.n))) + geom_point()
summaryBy(SALE.PRICE.n~ADDRESS, data=subset(mh.homes, SALE.PRICE.n<10000),
FUN=c(length, min, max))
mh.homes$outliers <- (log(mh.homes$SALE.PRICE.n) <=5) + 0
mh.homes <- mh.homes[which(mh.homes$outliers==0),]
ggplot(mh.homes, aes(GROSS.SQUARE.FEET, SALE.PRICE.n)) + geom_point()
ggplot(mh.homes, aes(log(GROSS.SQUARE.FEET), log(SALE.PRICE.n))) + geom_point()
mh.homes$NEIGHBORHOOD <- factor(mh.homes$NEIGHBORHOOD)
levels(mh.homes$NEIGHBORHOOD)
metrics <- function(x) {
c(length(x),                 # count
round(mean(x)),            # mean
round(median(x)),          # median
names(sort(-table(x)))[1], # mode
round(sd(x)),              # standard deviation
min(x),                    # minimum
max(x),                    # maximum
max(x)-min(x))             # range
}
summaryBy(SALE.PRICE.n~NEIGHBORHOOD, data=mh.homes, FUN=metrics,
fun.names=c("Count","Mean","Median","Mode","SD","Min","Max","Range"))
# Gross square feet across NEIGHBORHOODs
summaryBy(GROSS.SQUARE.FEET~NEIGHBORHOOD, data=mh.homes, FUN=metrics,
fun.names=c("Count","Mean","Median","Mode","SD","Min","Max","Range"))
# Land square feet across NEIGHBORHOODs
summaryBy(LAND.SQUARE.FEET~NEIGHBORHOOD, data=mh.homes, FUN=metrics,
fun.names=c("Count","Mean","Median","Mode","SD","Min","Max","Range"))
# Year built  across NEIGHBORHOODs
summaryBy(year.built~NEIGHBORHOOD, data=mh.homes, FUN=metrics,
fun.names=c("Count","Mean","Median","Mode","SD","Min","Max","Range"))
ggplot(mh.homes, aes(x=NEIGHBORHOOD, fill=NEIGHBORHOOD, ymax=max(..count..))) +
geom_histogram(binwidth = diff(range(mh.homes$SALE.PRICE.n)/28)) +
stat_bin(binwidth=1,geom="text",drop=TRUE,aes(label=..count.., vjust=-1))
ggplot(mh.homes, aes(x=SALE.PRICE.n, fill=NEIGHBORHOOD)) +
geom_histogram(binwidth = diff(range(mh.homes$SALE.PRICE.n)/60))
ggplot(mh.homes, aes(x=LAND.SQUARE.FEET, fill=NEIGHBORHOOD)) +
geom_histogram(binwidth = diff(range(mh.homes$LAND.SQUARE.FEET)/30))
ggplot(mh.homes, aes(x=NEIGHBORHOOD, y=LAND.SQUARE.FEET, fill=NEIGHBORHOOD)) +
geom_boxplot()
ggplot(mh.homes, aes(x=LAND.SQUARE.FEET, fill=NEIGHBORHOOD)) + stat_density()
ggplot(mh.homes, aes(x=NEIGHBORHOOD, y=LAND.SQUARE.FEET, color=NEIGHBORHOOD)) +
geom_jitter()
ggplot(mh.homes, aes(x=NEIGHBORHOOD, LAND.SQUARE.FEET, color=NEIGHBORHOOD)) +
geom_point()
ggplot(mh.homes, aes(x=LAND.SQUARE.FEET, color=NEIGHBORHOOD)) + geom_density()
ggplot(mh.homes, aes(x=LAND.SQUARE.FEET, fill=NEIGHBORHOOD)) +
geom_histogram(binwidth = diff(range(mh.homes$LAND.SQUARE.FEET)/30))
mh.homes$sale.month <- format(mh.homes$sale.date, "%B")
mh.homes$sale.day <- format(mh.homes$sale.date, "%A")
ggplot(mh.homes, aes(x=LAND.SQUARE.FEET, fill=NEIGHBORHOOD)) +
geom_histogram(binwidth = diff(range(mh.homes$LAND.SQUARE.FEET)/30))
ggplot(mh.homes, aes(x=LAND.SQUARE.FEET, fill=NEIGHBORHOOD)) +
geom_histogram(binwidth = diff(range(mh.homes$LAND.SQUARE.FEET)/30)) + xlim(x<5000)
ggplot(mh.homes, aes(x=LAND.SQUARE.FEET, fill=NEIGHBORHOOD)) +
geom_histogram(binwidth = diff(range(mh.homes$LAND.SQUARE.FEET)/30)) + xlim(LAND.SQUARE.FEET<5000)
geom_histogram(binwidth = diff(range(mh.homes$LAND.SQUARE.FEET)/30)) + xlim(mh.homes$LAND.SQUARE.FEET<5000)
ggplot(mh.homes, aes(x=LAND.SQUARE.FEET, fill=NEIGHBORHOOD)) +
geom_histogram(binwidth = diff(range(mh.homes$LAND.SQUARE.FEET)/30)) + xlim(mh.homes$LAND.SQUARE.FEET<5000)
ggplot(mh.homes, aes(x=LAND.SQUARE.FEET, fill=NEIGHBORHOOD)) +
geom_histogram(binwidth = diff(range(mh.homes$LAND.SQUARE.FEET)/30)) + x<5000
ggplot(mh.homes, aes(x=YEAR.BUILT, fill=NEIGHBORHOOD)) + stat_density()
mh.homes$sale.month <- format(mh.homes$sale.date, "%B")
mh.homes$sale.day <- format(mh.homes$sale.date, "%A")
mh.homes$sale.month <-
factor(mh.homes$sale.month,
levels= c("January", "February", "March", "April", "May", "June",
"July", "August", "September", "October", "November",
"December"))
mh.homes$sale.day <-
factor(mh.homes$sale.day,
levels= c("Monday", "Tuesday", "Wednesday", "Thursday", "Friday"))
summaryBy(SALE.PRICE.n~sale.month, data=mh.homes, FUN=metrics,
fun.names=c("Count","Mean","Median","Mode","SD","Min","Max","Range"))
mh$SALE.DATE <- as.Date(mh$SALE.DATE)
mh$YEAR.BUILT <- as.numeric(as.character(mh$YEAR.BUILT))
ggplot(mh, aes(x=SALE.PRICE.n)) +
geom_histogram(binwidth = diff(range(mh$SALE.PRICE.n)))
ggplot(subset(mh, SALE.PRICE.n>0), aes(x=SALE.PRICE.n)) +
geom_histogram(binwidth = diff(range(mh$SALE.PRICE.n)))
ggplot(subset(mh, SALE.PRICE.n==0), aes(x=GROSS.SQUARE.FEET)) +
geom_histogram(binwidth = diff(range(mh$GROSS.SQUARE.FEET)))
mh.sale <- mh[mh$SALE.PRICE.n!=0,]
ggplot(mh.sale, aes(GROSS.SQUARE.FEET, SALE.PRICE.n)) + geom_point()
ggplot(mh.sale, aes(log(GROSS.SQUARE.FEET), log(SALE.PRICE.n))) + geom_point()
mh.sale$BUILDING.CLASS.CATEGORY <- factor(mh.sale$BUILDING.CLASS.CATEGORY)
mh.sale$BUILDING.CLASS.CATEGORY <- factor(mh.sale$BUILDING.CLASS.CATEGORY)
levels(mh.sale$BUILDING.CLASS.CATEGORY)
summaryBy(GROSS.SQUARE.FEET+LAND.SQUARE.FEET~BUILDING.CLASS.CATEGORY,
data=mh.sale, FUN=c(min, max))
mh.homes <- mh.sale[which(grepl("FAMILY",mh.sale$BUILDING.CLASS.CATEGORY)),]
ggplot(mh.homes, aes(log(GROSS.SQUARE.FEET), log(SALE.PRICE.n))) + geom_point()
summaryBy(SALE.PRICE.n~ADDRESS, data=subset(mh.homes, SALE.PRICE.n<10000),
FUN=c(length, min, max))
mh.homes <- mh.homes[which(mh.homes$outliers==0),]
ggplot(mh.homes, aes(log(GROSS.SQUARE.FEET), log(SALE.PRICE.n))) + geom_point()
ggplot(mh.homes, aes(GROSS.SQUARE.FEET, SALE.PRICE.n)) + geom_point()
ggplot(mh.homes, aes(log(GROSS.SQUARE.FEET), log(SALE.PRICE.n))) + geom_point()
mh.homes$NEIGHBORHOOD <- factor(mh.homes$NEIGHBORHOOD)
levels(mh.homes$NEIGHBORHOOD)
levels(mh.homes$NEIGHBORHOOD)
metrics <- function(x) {
c(length(x),                 # count
round(mean(x)),            # mean
round(median(x)),          # median
names(sort(-table(x)))[1], # mode
round(sd(x)),              # standard deviation
min(x),                    # minimum
max(x),                    # maximum
max(x)-min(x))             # range
}
summaryBy(SALE.PRICE.n~NEIGHBORHOOD, data=mh.homes, FUN=metrics,
fun.names=c("Count","Mean","Median","Mode","SD","Min","Max","Range"))
summaryBy(SALE.PRICE.n~NEIGHBORHOOD, data=mh.homes, FUN=metrics,
fun.names=c("Count","Mean","Median","Mode","SD","Min","Max","Range"))
summaryBy(GROSS.SQUARE.FEET~NEIGHBORHOOD, data=mh.homes, FUN=metrics,
fun.names=c("Count","Mean","Median","Mode","SD","Min","Max","Range"))
ggplot(mh.homes, aes(x=NEIGHBORHOOD, fill=NEIGHBORHOOD, ymax=max(..count..))) +
geom_histogram(binwidth = diff(range(mh.homes$SALE.PRICE.n)/28)) +
stat_bin(binwidth=1,geom="text",drop=TRUE,aes(label=..count.., vjust=-1))
ggplot(mh.homes, aes(x=SALE.PRICE.n, fill=NEIGHBORHOOD)) +
geom_histogram(binwidth = diff(range(mh.homes$SALE.PRICE.n)/60))
ggplot(mh.homes, aes(x=SALE.PRICE.n, fill=NEIGHBORHOOD)) + stat_density()
ggplot(mh.homes, aes(x=NEIGHBORHOOD, SALE.PRICE.n, color=NEIGHBORHOOD)) +
geom_point()
ggplot(mh.homes, aes(x=NEIGHBORHOOD, y=GROSS.SQUARE.FEET, color=NEIGHBORHOOD)) +
geom_jitter()
ggplot(mh.homes, aes(x=NEIGHBORHOOD, y=LAND.SQUARE.FEET, color=NEIGHBORHOOD)) +
geom_jitter()
mh.homes$sale.month <- format(mh.homes$SALE.DATE, "%B")
summaryBy(SALE.PRICE.n~sale.month, data=mh.homes, FUN=metrics,
fun.names=c("Count","Mean","Median","Mode","SD","Min","Max","Range"))
ggplot(mh.homes, aes(x=SALE.PRICE.n, fill=sale.day)) +
geom_histogram(binwidth = diff(range(mh.homes$SALE.PRICE.n)/60))
ggplot(mh.homes, aes(x=SALE.PRICE.n, fill=NEIGHBORHOOD)) +
geom_histogram(binwidth = diff(range(mh.homes$SALE.PRICE.n)/60))
ggplot(mh.homes, aes(x=NEIGHBORHOOD, fill=NEIGHBORHOOD, ymax=max(..count..))) +
geom_histogram(binwidth = diff(range(mh.homes$SALE.PRICE.n)/28)) +
stat_bin(binwidth=1,geom="text",drop=TRUE,aes(label=..count.., vjust=-1))
# Factorize NEIGHBORHOOD
mh.homes$NEIGHBORHOOD <- factor(mh.homes$NEIGHBORHOOD)
# Let's first see which NEIGHBORHOODs are included in our data
levels(mh.homes$NEIGHBORHOOD)
# Let's explore the data quantitatively first:
metrics <- function(x) {
c(length(x),                 # count
round(mean(x)),            # mean
round(median(x)),          # median
names(sort(-table(x)))[1], # mode
round(sd(x)),              # standard deviation
min(x),                    # minimum
max(x),                    # maximum
max(x)-min(x))             # range
}
summaryBy(SALE.PRICE.n~NEIGHBORHOOD, data=mh.homes, FUN=metrics,
fun.names=c("Count","Mean","Median","Mode","SD","Min","Max","Range"))
mh <- read.csv(file="manhattan.csv",head=TRUE,sep=",")
# Get some information about what we have to work with
head(mh)
summary(mh)
# Creates a numerical version of columns containing commas and/or dollar signs
mh$SALE.PRICE.n <- as.numeric(gsub("[^[:digit:]]", "", mh$SALE.PRICE))
mh$GROSS.SQUARE.FEET <- as.numeric(gsub("[^[:digit:]]", "", mh$GROSS.SQUARE.FEET))
mh$LAND.SQUARE.FEET <- as.numeric(gsub("[^[:digit:]]", "", mh$LAND.SQUARE.FEET))
# See if we have any invalid values within the newly created columns
count(is.na(mh$SALE.PRICE.n))
count(is.na(mh$GROSS.SQUARE.FEET))
count(is.na(mh$LAND.SQUARE.FEET))
################################################################################
# Next, conduct exploratory data analysis in order to find out where there are
# outlier or missing values, decide how you will treat them, make sure the
# dates are formatted correctly, make sure values you think are numerical are
# being treated as such, etc.
################################################################################
# Making sure dates are formatted correctly
mh$SALE.DATE <- as.Date(mh$SALE.DATE)
# Making sure values I think are numerical are being treated as such
mh$YEAR.BUILT <- as.numeric(as.character(mh$YEAR.BUILT))
# Some exploration to make sure there's nothing weird going on with sale prices
# Total sales on record
ggplot(mh, aes(x=SALE.PRICE.n)) +
geom_histogram(binwidth = diff(range(mh$SALE.PRICE.n)))
# Total sales on record with a price more than 0
ggplot(subset(mh, SALE.PRICE.n>0), aes(x=SALE.PRICE.n)) +
geom_histogram(binwidth = diff(range(mh$SALE.PRICE.n)))
# Total sales on record with a price of 0
ggplot(subset(mh, SALE.PRICE.n==0), aes(x=GROSS.SQUARE.FEET)) +
geom_histogram(binwidth = diff(range(mh$GROSS.SQUARE.FEET)))
# We shall treat sales with price of 0 as missing values and omit them
# Keep only the actual sales
mh.sale <- mh[mh$SALE.PRICE.n!=0,]
# Let us look for some outliers
ggplot(mh.sale, aes(GROSS.SQUARE.FEET, SALE.PRICE.n)) + geom_point()
ggplot(mh.sale, aes(log(GROSS.SQUARE.FEET), log(SALE.PRICE.n))) + geom_point()
# Seems like we found some let's investigate further and see what we can do
# Factorize BUILDING.CLASS.CATEGORY
mh.sale$BUILDING.CLASS.CATEGORY <- factor(mh.sale$BUILDING.CLASS.CATEGORY)
# Let us look at building types and see what is most reasonable to work with
levels(mh.sale$BUILDING.CLASS.CATEGORY)
# We do want to work with building types that give us GROSS.SQUARE.FEET and lad.sqft
summaryBy(GROSS.SQUARE.FEET+LAND.SQUARE.FEET~BUILDING.CLASS.CATEGORY,
data=mh.sale, FUN=c(min, max))
# It seems most reasonable to work with 1, 2, and 3 family homes
mh.homes <- mh.sale[which(grepl("FAMILY",mh.sale$BUILDING.CLASS.CATEGORY)),]
# Let us look and see if we still have outliers
ggplot(mh.homes, aes(GROSS.SQUARE.FEET, SALE.PRICE.n)) + geom_point()
ggplot(mh.homes, aes(log(GROSS.SQUARE.FEET), log(SALE.PRICE.n))) + geom_point()
# We seem to have some, let's take a closer look
summaryBy(SALE.PRICE.n~ADDRESS, data=subset(mh.homes, SALE.PRICE.n<10000),
FUN=c(length, min, max))
# The summarized values above are definitely outliers and so we shall omit them
mh.homes$outliers <- (log(mh.homes$SALE.PRICE.n) <=5) + 0
mh.homes <- mh.homes[which(mh.homes$outliers==0),]
# Let us look and see if we still have outliers
ggplot(mh.homes, aes(GROSS.SQUARE.FEET, SALE.PRICE.n)) + geom_point()
ggplot(mh.homes, aes(log(GROSS.SQUARE.FEET), log(SALE.PRICE.n))) + geom_point()
# This looks beautiful, we can now continue with our work!
################################################################################
# Once the data is in good shape, conduct exploratory data analysis to visualize
# and make compariosons (i) across NEIGHBORHOODs,
################################################################################
# Factorize NEIGHBORHOOD
mh.homes$NEIGHBORHOOD <- factor(mh.homes$NEIGHBORHOOD)
# Let's first see which NEIGHBORHOODs are included in our data
levels(mh.homes$NEIGHBORHOOD)
# Let's explore the data quantitatively first:
metrics <- function(x) {
c(length(x),                 # count
round(mean(x)),            # mean
round(median(x)),          # median
names(sort(-table(x)))[1], # mode
round(sd(x)),              # standard deviation
min(x),                    # minimum
max(x),                    # maximum
max(x)-min(x))             # range
}
# Sale price across NEIGHBORHOODs
summaryBy(SALE.PRICE.n~NEIGHBORHOOD, data=mh.homes, FUN=metrics,
fun.names=c("Count","Mean","Median","Mode","SD","Min","Max","Range"))
# Gross square feet across NEIGHBORHOODs
summaryBy(GROSS.SQUARE.FEET~NEIGHBORHOOD, data=mh.homes, FUN=metrics,
fun.names=c("Count","Mean","Median","Mode","SD","Min","Max","Range"))
# Land square feet across NEIGHBORHOODs
summaryBy(LAND.SQUARE.FEET~NEIGHBORHOOD, data=mh.homes, FUN=metrics,
fun.names=c("Count","Mean","Median","Mode","SD","Min","Max","Range"))
# Year built  across NEIGHBORHOODs
summaryBy(YEAR.BUILT~NEIGHBORHOOD, data=mh.homes, FUN=metrics,
fun.names=c("Count","Mean","Median","Mode","SD","Min","Max","Range"))
ggplot(mh.homes, aes(x=NEIGHBORHOOD, fill=NEIGHBORHOOD, ymax=max(..count..))) +
geom_histogram(binwidth = diff(range(mh.homes$SALE.PRICE.n)/28)) +
stat_bin(binwidth=1,geom="text",drop=TRUE,aes(label=..count.., vjust=-1))
ggplot(mh.homes, aes(x=SALE.PRICE.n, fill=NEIGHBORHOOD)) +
geom_histogram(binwidth = diff(range(mh.homes$SALE.PRICE.n)/60))
ggplot(mh.homes, aes(x=NEIGHBORHOOD, y=SALE.PRICE.n, fill=NEIGHBORHOOD)) +
geom_boxplot()
ggplot(mh.homes, aes(x=NEIGHBORHOOD, y=SALE.PRICE.n, fill=NEIGHBORHOOD)) +
geom_boxplot() + coord_flip()
ggplot(mh.homes, aes(x=SALE.PRICE.n, color=NEIGHBORHOOD)) + geom_density()
ggplot(mh.homes, aes(x=SALE.PRICE.n, fill=NEIGHBORHOOD)) + stat_density()
ggplot(mh.homes, aes(x=NEIGHBORHOOD, SALE.PRICE.n, color=NEIGHBORHOOD)) +
geom_point()
ggplot(mh.homes, aes(x=NEIGHBORHOOD, SALE.PRICE.n, color=NEIGHBORHOOD)) +
geom_point() + coord_flip()
ggplot(mh.homes, aes(x=NEIGHBORHOOD, SALE.PRICE.n, color=NEIGHBORHOOD)) +
geom_point() + coord_flip()
ggplot(mh.homes, aes(x=GROSS.SQUARE.FEET, fill=NEIGHBORHOOD)) +
geom_histogram(binwidth = diff(range(mh.homes$GROSS.SQUARE.FEET)/60))
ggplot(mh.homes, aes(x=GROSS.SQUARE.FEET, fill=NEIGHBORHOOD)) +
geom_histogram(binwidth = diff(range(mh.homes$GROSS.SQUARE.FEET)/60)) + coord_flip()
ggplot(mh.homes, aes(x=NEIGHBORHOOD, y=GROSS.SQUARE.FEET, fill=NEIGHBORHOOD)) +
geom_boxplot()
ggplot(mh.homes, aes(x=NEIGHBORHOOD, y=GROSS.SQUARE.FEET, fill=NEIGHBORHOOD)) +
geom_boxplot() + coord_flip()
ggplot(mh.homes, aes(x=GROSS.SQUARE.FEET, color=NEIGHBORHOOD)) + geom_density()
ggplot(mh.homes, aes(x=NEIGHBORHOOD, y=GROSS.SQUARE.FEET, color=NEIGHBORHOOD)) +
ggplot(mh.homes, aes(x=NEIGHBORHOOD, y=GROSS.SQUARE.FEET, color=NEIGHBORHOOD)) +
geom_jitter()
ggplot(mh.homes, aes(x=NEIGHBORHOOD, GROSS.SQUARE.FEET, color=NEIGHBORHOOD)) +
geom_point()
ggplot(mh.homes, aes(x=NEIGHBORHOOD, GROSS.SQUARE.FEET, color=NEIGHBORHOOD)) +
geom_point() + coord_flip()
ggplot(mh.homes, aes(x=GROSS.SQUARE.FEET, fill=NEIGHBORHOOD)) + stat_density()
ggplot(mh.homes, aes(x=LAND.SQUARE.FEET, fill=NEIGHBORHOOD)) +
geom_histogram(binwidth = diff(range(mh.homes$LAND.SQUARE.FEET)/30))
ggplot(mh.homes, aes(x=LAND.SQUARE.FEET, fill=NEIGHBORHOOD)) + stat_density()
ggplot(mh.homes, aes(x=LAND.SQUARE.FEET, fill=NEIGHBORHOOD)) + stat_density()
ggplot(mh.homes, aes(x=NEIGHBORHOOD, LAND.SQUARE.FEET, color=NEIGHBORHOOD)) +
geom_point()
ggplot(mh.homes, aes(x=YEAR.BUILT, fill=NEIGHBORHOOD)) + stat_density()
ggplot(mh.homes, aes(x=YEAR.BUILT, fill=NEIGHBORHOOD)) + stat_density() + coord_flip()
summaryBy(SALE.PRICE.n~NEIGHBORHOOD, data=mh.homes, FUN=metrics,
fun.names=c("Count","Mean","Median","Mode","SD","Min","Max","Range"))
ggplot(mh.homes, aes(x=SALE.PRICE.n, fill=NEIGHBORHOOD)) +
geom_histogram(binwidth = diff(range(mh.homes$SALE.PRICE.n)/60))
ggplot(mh.homes, aes(x=SALE.PRICE.n, fill=NEIGHBORHOOD)) + stat_density()
ggplot(mh.homes, aes(x=YEAR.BUILT, fill=NEIGHBORHOOD)) + stat_density() + coord_flip()
ggplot(mh.homes, aes(x=NEIGHBORHOOD, SALE.PRICE.n, color=NEIGHBORHOOD)) +
geom_point() + coord_flip()
ggplot(mh.homes, aes(x=GROSS.SQUARE.FEET, fill=NEIGHBORHOOD)) +
geom_histogram(binwidth = diff(range(mh.homes$GROSS.SQUARE.FEET)/60)) + coord_flip()
ggplot(mh.homes, aes(x=GROSS.SQUARE.FEET, fill=NEIGHBORHOOD)) +
geom_histogram(binwidth = diff(range(mh.homes$GROSS.SQUARE.FEET)/60)) + coord_flip()
ggplot(mh.homes, aes(x=NEIGHBORHOOD, y=GROSS.SQUARE.FEET, fill=NEIGHBORHOOD)) +
geom_boxplot() + coord_flip()
ggplot(mh.homes, aes(x=NEIGHBORHOOD, GROSS.SQUARE.FEET, color=NEIGHBORHOOD)) +
geom_point() + coord_flip()
ggplot(mh.homes, aes(x=YEAR.BUILT, fill=NEIGHBORHOOD)) + stat_density() + coord_flip()
ggplot(mh.homes, aes(x=NEIGHBORHOOD, y=SALE.PRICE.n, fill=NEIGHBORHOOD)) +
geom_boxplot() + coord_flip()
ggplot(mh.homes, aes(x=SALE.PRICE.n, fill=NEIGHBORHOOD)) +
geom_histogram(binwidth = diff(range(mh.homes$SALE.PRICE.n)/60))
ggplot(mh.homes, aes(x=LAND.SQUARE.FEET, fill=NEIGHBORHOOD)) +
geom_histogram(binwidth = diff(range(mh.homes$LAND.SQUARE.FEET)/30))
ggplot(mh.homes, aes(x=LAND.SQUARE.FEET, fill=NEIGHBORHOOD)) +
geom_histogram(binwidth = diff(range(mh.homes$LAND.SQUARE.FEET)/30))
ggplot(mh.homes, aes(x=LAND.SQUARE.FEET, fill=NEIGHBORHOOD)) +
geom_histogram(binwidth = diff(range(mh.homes$LAND.SQUARE.FEET)/30))
ggplot(mh.homes, aes(x=LAND.SQUARE.FEET, fill=NEIGHBORHOOD)) +
geom_histogram(binwidth = diff(range(mh.homes$LAND.SQUARE.FEET)/30)) +xlim(LAND.SQUARE.FEET<5000)
ggplot(mh.homes, aes(x=LAND.SQUARE.FEET, fill=NEIGHBORHOOD)) +
geom_histogram(binwidth = diff(range(mh.homes$LAND.SQUARE.FEET)/30)) +xlim(LAND.SQUARE.FEET<5000)
ggplot(mh.homes, aes(x=LAND.SQUARE.FEET, fill=NEIGHBORHOOD)) +
geom_histogram(binwidth = diff(range(mh.homes$LAND.SQUARE.FEET)/30)) +xlim(mh.homes$LAND.SQUARE.FEET<5000)
ggplot(mh.homes, aes(x=LAND.SQUARE.FEET, fill=NEIGHBORHOOD)) +
geom_histogram(binwidth = diff(range(mh.homes$LAND.SQUARE.FEET)/30) +xlim(mh.homes$LAND.SQUARE.FEET<5000))
ggplot(mh.homes, aes(x=LAND.SQUARE.FEET, fill=NEIGHBORHOOD)) +
geom_histogram(binwidth = diff(range(mh.homes$LAND.SQUARE.FEET)/30) +xlim(LAND.SQUARE.FEET<5000))
ggplot(mh.homes, aes(x=LAND.SQUARE.FEET, fill=NEIGHBORHOOD)) +
geom_histogram(binwidth = diff(range(mh.homes$LAND.SQUARE.FEET)/30))
ggplot(manxlim, aes(x=LAND.SQUARE.FEET, fill=NEIGHBORHOOD)) +
geom_histogram(binwidth = diff(range(mh.homes$LAND.SQUARE.FEET)/30))
manxlim <- mh.homes%>%filter(LAND.SQUARE.FEET<5000)
ggplot(manxlim, aes(x=LAND.SQUARE.FEET, fill=NEIGHBORHOOD)) +
geom_histogram(binwidth = diff(range(mh.homes$LAND.SQUARE.FEET)/30))
